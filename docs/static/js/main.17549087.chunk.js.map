{"version":3,"sources":["components/AddCategory.js","services/getGifService.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifsService","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","console","log","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAyCeA,EArCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,oBAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAqBrC,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,4BAAQA,GAAR,CAAcP,OACjCC,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAc,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAGX,qCAETC,EALoB,iDAK4BC,UAAUH,GALtC,6BAGX,sCAHW,SAMPI,MAAMF,GANC,cAMpBG,EANoB,gBAOHA,EAAKC,OAPF,uBAOlBC,EAPkB,EAOlBA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAfhB,kBAmBnBM,GAnBmB,4CAAH,sDCCdO,EAAc,SAAC,GAAwB,IAAtBH,EAAqB,EAArBA,MAAOV,EAAc,EAAdA,IAAc,EAATS,GAOtC,OACI,sBAAKK,UAAU,yCAAf,UACI,4BAAIJ,IACJ,qBAAKK,IAAKf,EAAKgB,IAAKN,QCqBjBO,EA9BC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAJ,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA4BtC,OArBAC,qBAAW,WAGPxB,EAAeC,GAEVwB,MAAK,SAAAC,GAEFC,YAAW,WAEPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGd,UAGZ,CAACpB,IAIGqB,EDzBwBM,CAAa3B,GAAhCa,EAHgB,EAGrBN,KAAaa,EAHQ,EAGRA,QAEpB,OADAQ,QAAQC,IAAI,YAAc7B,GAEtB,qCACI,6BAAKA,IACJoB,GAAW,4CAEZ,qBAAKJ,UAAU,YAAf,SAQQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEkBtBmB,EApCM,WAAM,MAKa5C,mBAAS,CAAC,eALvB,mBAKhB6C,EALgB,KAKJ9C,EALI,KAQvB,OACI,qCAEI,+CAGA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEC2C,QAAQC,IAAI,sBAAwBE,GAGrC,6BAEQA,EAAWtB,KAAI,SAAAT,GAAQ,OAEnB,aADA,CACC,EAAD,CAEAA,SAAUA,GADLA,Y,MCxB7BgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.17549087.chunk.js","sourcesContent":["\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('Escriba un Texto');\r\n\r\n    //\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    //\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (inputValue.trim().length > 2 ) {\r\n            // Asigna el valor del input al arreglo en GifExpertApp\r\n            setCategories( cats => [...cats, inputValue]); \r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\n//Obliga a pasar un SetCategories atraves del Props\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;\r\n","\r\n\r\nexport const getGifsService = async (category) => {\r\n\r\n    //Consumir la api y desestructurar la informacion\r\n    const apikey = \"E819tRW8kVAi2v89wjsr2bGw1WiS2nBp&q\"\r\n    //Category le pasara el parametro de la busqueda al query de la url\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category) }&limit=10&api_key=${apikey}`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n\r\n    const gifs = data.map(img => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\n// devuelve la card con e; titulo y la imagen del gif\r\nexport const GifGridItem = ({ title, url, id }) => {\r\n\r\n    /* Visualizar los items en la consola\r\n    console.log('GifGridItem =id=: ' + id)\r\n    console.log(' =title=: ' + title + ' =url=: ' + url)\r\n    */\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <p>{title}</p>\r\n            <img src={url} alt={title}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport {GifGridItem} from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    //useFetchGifs recibe el atributo a buscar en la api\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    console.log(\"GifGrid: \" + category)\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p> Loading...</p>\r\n            }\r\n            <div className=\"card-grid\">        \r\n                {\r\n                    /*\r\n                    data.map( ({id, title}) => (\r\n                        <li key={id}> {title} </li>\r\n                    ))\r\n                    */\r\n                    \r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from 'react'\nimport { getGifsService } from '../services/getGifService';\n\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        // llama al getGifsService y le pasa el argumento en el buscador\n        getGifsService(category)\n            //retorna el conjunto de imagenes y lo asigna a la variable img\n            .then(imgs => {\n\n                setTimeout(() => {\n\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n\n                }, 3000);\n            })\n\n    }, [category])\n    // [category]  se usa para evitar missing dependency: 'category'\n\n\n    return state; // { data:[], loading: true };\n}\n\n\n","//Main\r\n\r\nimport React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = ['Volkswagen', 'Suzuki', 'Mazda'];\r\n\r\n    // Por defecto el arreglo tendra el primer valor de asigando por el useState\r\n    const [categories, setCategories] = useState(['Volkswagen']);\r\n\r\n    //Codigo Html\r\n    return (\r\n        <>\r\n            {/*Titulo*/}\r\n            <h2>GiftExpertApp</h2>\r\n\r\n            {/*Componente AddCategory para pasar setCategories atraves del props en el buscador AddCategory*/}\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr/>\r\n\r\n            {console.log(\"GifExpertApp Main: \" + categories)}\r\n\r\n            {/*Lista de Imagenes*/}\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        //return <li key={category}> {category}</li>\r\n                        <GifGrid \r\n                        key={category} \r\n                        category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp  from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}